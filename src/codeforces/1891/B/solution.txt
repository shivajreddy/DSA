
5 3
1 2 3 4 4
2 3 4

1 2 3 6 6


7 8 12 36 48 6 3
10 4 2

q=10 => d=2^10=
no num is % d == 0
q=4 => d=2^4=16
48%16==0 add 2^3=8
7 8 12 36 56 6 3
q=2 => d=2^2=4
8,12,36,56 % 4 == 0 add 2^1=2
7 10 14 38 58 6 3


OBSERVATION:
min_query = 2^1  = 2
max_query = 2^30 = 1_073_741_824
odd nums will never be changed
- say we are checking if the number is being divisible by 2^3,
  if we it does, then the new number (+2^2)

         1 2  3 4 4
        -1 1 -1 2 2 
           2    4 4
    q=2    y    y y
    q=3    n    y y
    q=4    n    y y
 
-1 3 2 2 4 1 -1 
1 1 1 1 1 
-1 1 2 3 4 

MAIN LOGIC & OBSERVATION:
if a number is divisible by 2^x, to keep it divisible by 2^x and,
if you had to add a number to it, it should be in multiples of 2^x
Ex: 8 is divisible by 2. to keep 8 divisible by 2 but want to add  
something to 8, then it should be multiples of 2. 8+(2*1) or 8+(2*2)
- but the problem says to add 2^x-1, this means that the number won't 
  be divisble by 2^x anymore after adding 2^x-1
- so, the moment you add 2^x-1 to the number, all powers 
  starting 2^x and above wont divide the number anymore.
- this means in the given question, say we current power is 5, and 
  say we have a number that is divisible by 2^5, then we add 2^4 to it,
  which makes the new number not divisble by 2^5, 2^6, 2^7, 2^8, ...
- so we can go over the given array of q, and create a minimum array, 
  where each number is the new lowest q found.
  - i.e., the minimum_array at max will have 30 numbers. since 1<=qi<=30
- 

